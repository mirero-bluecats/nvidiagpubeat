name: Release

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Install VirtualEnv
      run: |
        sudo apt-get clean && apt-get update && apt-get upgrade -y 
        sudo apt-get install python-pip  -y
        sudo pip install virtualenv
    - name: Install Mage 
      run: |
        go get -u -d github.com/magefile/mage
        cd ~/go/src/github.com/magefile/mage
        go run bootstrap.go
    - name: Check out code the Go-Way
      run: go get github.com/${GITHUB_REPOSITORY}

    - name: Get dependencies
      run: |
        env
        cd ~/go/src/github.com/${GITHUB_REPOSITORY}
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        go get -v github.com/mattn/goveralls
        go install -v github.com/mattn/goveralls
    - name: Make release folder
      run: |
        mkdir ~/release
    
    - name: Build
      run: |
        cd ~/go/src/github.com/${GITHUB_REPOSITORY}
        CGO_ENABLED=0 COOS=linux GOARCH=amd64 go build -o nvidiagpubeat -ldflags "-s -X main.qualifier=syshim"
        cp nvidiagpubeat ~/release/nvidiagpubeat
        cd ~
        pwd
        
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: beats
        # Directory containing files to upload
        path: ../../.././release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ../../.././release/nvidiagpubeat
        asset_name: nvidiagpubeat
        asset_content_type: application/octet-stream
